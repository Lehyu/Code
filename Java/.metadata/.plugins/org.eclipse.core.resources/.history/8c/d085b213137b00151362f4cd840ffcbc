package com.Algorithm;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class Bayesian {
	private String RegExp1 = "(>=|<=|!=|==|>|<|=).*";
	private String RegExp2 = ">=|<=|!=|==|>|<|=";
	private String[][] data;
	private HashMap<String, Integer> label;
	private int label_index;
	
	public Bayesian(String[][] data, int label_index){
		this.data = data;
		label = new HashMap<String, Integer>();
		this.label_index = label_index;
		init();
	}

	public void init(){
		for(int i = 0; i < data.length; i++){
			String cur = data[i][label_index];
			Integer value = label.get(cur);
			if(value == null){
				value = 1;
			}else{
				value++;
			}
			label.put(cur, value);
		}
	}
	public int getLabel(String selected){
		return label.get(selected);
	}
	public double P(HashMap<Integer, String> condition){
		int numerator = selected(condition);
		int denominator = getLabel(condition.get(label_index));
	}
	public int selected(HashMap<Integer, String> conditions) {
		int num = 0;
		Set<Integer> key = conditions.keySet();
		for (int i = 0; i < data.length; i++) {
			Iterator<Integer> it = key.iterator();
			boolean flag = true;
			while (it.hasNext()) {
				int j = it.next();
				String exp = conditions.get((Integer)j);
				String value;
				String oper;
				if(!exp.matches(RegExp1)){
					value = exp;
					oper = "==";
				}else{
					 String[] tmp = exp.split(RegExp2);
					 value = tmp[1].trim();
					 tmp = exp.split(value);
					 oper = tmp[0].trim();
				}
				if (!compare(data[i][j],oper,value)) {
					flag = false;
					break;
				}
			}
			if (flag)
				num++;
		}
		return num;
	}
	
	private boolean compare(String data, String oper, String value){
		int flag = data.compareTo(value);
		if(("==".equals(oper)|| "=".equals(oper) )&& flag == 0){
			return true;
		}else if(">=".equals(oper) && flag >= 0){
			return true;
		}else if("<=".equals(oper) && flag <= 0){
			return true;
		}else if("!=".equals(oper) && flag!=0){
			return true;
		}else if(">".equals(oper) && flag > 0){
			return true;
		}else if("<".equals(oper) && flag < 0){
			return true;
		}else{
			return false;
		}
		
	}
}
